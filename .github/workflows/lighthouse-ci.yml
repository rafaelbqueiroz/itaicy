name: Lighthouse CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  lighthouse-ci:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Start server
        run: |
          npm start &
          sleep 30
          curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:5000/
        env:
          NODE_ENV: production
          PORT: 5000

      - name: Run Lighthouse CI (Development)
        if: github.ref != 'refs/heads/main'
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          CI_ENVIRONMENT: development
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run Lighthouse CI (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          CI_ENVIRONMENT: production
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30

      - name: Comment PR with Lighthouse results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read Lighthouse results
            const resultsDir = '.lighthouseci';
            if (!fs.existsSync(resultsDir)) {
              console.log('No Lighthouse results found');
              return;
            }
            
            const manifestPath = path.join(resultsDir, 'manifest.json');
            if (!fs.existsSync(manifestPath)) {
              console.log('No manifest.json found');
              return;
            }
            
            const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
            const results = manifest.map(result => {
              const lhr = JSON.parse(fs.readFileSync(result.jsonPath, 'utf8'));
              return {
                url: lhr.finalUrl,
                performance: Math.round(lhr.categories.performance.score * 100),
                accessibility: Math.round(lhr.categories.accessibility.score * 100),
                seo: Math.round(lhr.categories.seo.score * 100),
                lcp: Math.round(lhr.audits['largest-contentful-paint'].numericValue),
                fid: Math.round(lhr.audits['max-potential-fid']?.numericValue || 0),
                cls: Math.round(lhr.audits['cumulative-layout-shift'].numericValue * 1000) / 1000
              };
            });
            
            // Create comment body
            let comment = '## ðŸš¦ Lighthouse CI Results\n\n';
            comment += '| URL | Performance | Accessibility | SEO | LCP | FID | CLS |\n';
            comment += '|-----|-------------|---------------|-----|-----|-----|-----|\n';
            
            results.forEach(result => {
              const perfEmoji = result.performance >= 90 ? 'ðŸŸ¢' : result.performance >= 70 ? 'ðŸŸ¡' : 'ðŸ”´';
              const a11yEmoji = result.accessibility >= 90 ? 'ðŸŸ¢' : result.accessibility >= 70 ? 'ðŸŸ¡' : 'ðŸ”´';
              const seoEmoji = result.seo >= 90 ? 'ðŸŸ¢' : result.seo >= 70 ? 'ðŸŸ¡' : 'ðŸ”´';
              const lcpEmoji = result.lcp <= 2500 ? 'ðŸŸ¢' : result.lcp <= 4000 ? 'ðŸŸ¡' : 'ðŸ”´';
              const clsEmoji = result.cls <= 0.1 ? 'ðŸŸ¢' : result.cls <= 0.25 ? 'ðŸŸ¡' : 'ðŸ”´';
              
              comment += `| ${result.url} | ${perfEmoji} ${result.performance} | ${a11yEmoji} ${result.accessibility} | ${seoEmoji} ${result.seo} | ${lcpEmoji} ${result.lcp}ms | - | ${clsEmoji} ${result.cls} |\n`;
            });
            
            comment += '\n### ðŸ“Š Core Web Vitals Thresholds\n';
            comment += '- **LCP (Largest Contentful Paint)**: ðŸŸ¢ â‰¤2.5s ðŸŸ¡ â‰¤4.0s ðŸ”´ >4.0s\n';
            comment += '- **FID (First Input Delay)**: ðŸŸ¢ â‰¤100ms ðŸŸ¡ â‰¤300ms ðŸ”´ >300ms\n';
            comment += '- **CLS (Cumulative Layout Shift)**: ðŸŸ¢ â‰¤0.1 ðŸŸ¡ â‰¤0.25 ðŸ”´ >0.25\n';
            
            // Post comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  performance-budget:
    runs-on: ubuntu-latest
    needs: lighthouse-ci
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check performance budget
        run: |
          npm install -g lighthouse-ci-action
          node scripts/performance-budget-check.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify on performance regression
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#dev-alerts'
          text: |
            ðŸš¨ Performance regression detected!
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            
            One or more pages failed to meet performance thresholds.
            Check the Lighthouse CI results for details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-preview:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for preview
        run: npm run build
        env:
          NODE_ENV: production

      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Run Lighthouse on Preview
        run: |
          npm install -g @lhci/cli@0.12.x
          # Wait for deployment
          sleep 60
          # Run Lighthouse on preview URL
          lhci autorun --config=lighthouserc.preview.js
        env:
          VERCEL_URL: ${{ steps.vercel.outputs.preview-url }}
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
