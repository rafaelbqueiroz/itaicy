Para que o botão “RESERVAR” fique sempre à direita e todo o widget redimensione de modo fluido — sem quebrar linhas quando aparecem muitos campos de idade — podemos seguir este plano:

---

## 1. Estrutura com CSS Grid

Em vez de usar um `flex-wrap` (que força wrap em múltiplas linhas), use um **grid** com última coluna fixa para o botão:

```html
<form class="booking-widget">
  <div class="field">…</div> <!-- Check-in -->
  <div class="field">…</div> <!-- Check-out -->
  <div class="field">…</div> <!-- Adultos -->
  <div class="field">…</div> <!-- Crianças -->
  <!-- campos de idade gerados dinamicamente… -->
  <button class="btn-reservar">Reservar</button>
</form>
```

```css
.booking-widget {
  display: grid;
  grid-auto-flow: column;
  grid-auto-columns: minmax(8rem, 1fr);
  grid-template-columns: repeat(auto-fit, minmax(8rem, 1fr)) minmax(auto, max-content);
  gap: 1rem;
  align-items: end;
}
.btn-reservar {
  /* a última coluna do grid */
  grid-column: -1;
  white-space: nowrap;
}
```

* **`grid-auto-columns: minmax(8rem, 1fr)`** garante que cada campo ocupe no mínimo 8rem e cresça uniformemente.
* **`grid-template-columns: … max-content`** fixa o botão no fim, com largura justa ao seu conteúdo.
* **`gap: 1rem`** (16 px) respeita nosso **spacing** token.

Dessa forma, se surgir mais um campo de “Idade criança”, ele simplesmente empurra levemente as colunas mas NUNCA desce para a linha de baixo — e o botão permanece encaixado à direita.

---

## 2. Comportamento JavaScript para datas

* **“Check-in” → “Check-out”**: ao escolher a data de chegada, inicie o datepicker de saída com `minDate = dataCheckin + 1d`.
* Use uma biblioteca de datepicker (Flatpickr, Pikaday, etc.) que suporte estas opções:

  ```js
  flatpickr("#checkin", {
    onChange: (selectedDates) => {
      checkoutPicker.set("minDate", selectedDates[0].fp_incr(1));
    }
  });
  flatpickr("#checkout", { minDate: new Date().fp_incr(1) });
  ```

---

## 3. Dinâmica de crianças e idades

1. **Select “Crianças”**: ao mudar, atualize um state `numKids`.
2. **Renderize** `numKids` dropdowns de idade em linha — eles entram como colunas adicionais no mesmo grid.
3. **Limite máximo visível** (por exemplo 4 crianças) e, se exceder, mostre um badge “+3” que abre um modal/popover para preencher as outras idades, evitando poluir a barra.

```jsx
{Array.from({length: numKids}).map((_, i) => (
  <div key={i} className="field">
    <label>Idade {i+1}</label>
    <select>…</select>
  </div>
))}
```

---

## 4. Responsividade

* **Desktop (≥992px)**: grid de uma linha, overflow-x escondido.
* **Tablet (768–991px)**: reduzir mínimo de cada coluna (`minmax(6rem, 1fr)`).
* **Mobile (<768px)**: `overflow-x: auto;` no container, permitindo swipe horizontal.

```css
@media (max-width: 767px) {
  .booking-widget {
    overflow-x: auto;
    padding-bottom: 1rem; /* para scroll */
  }
}
```

---

## 5. Padrões de estilo (segundo o Design System)

* **Inputs**: borda `1px river-slate/800`, padding `0.75rem 1rem`, radius `4px`.
* **Botão**: `bg-sunset-amber/600` + `text-cloud-white/0` + `font-medium (Lato 500)` + `tracking +0.05em`, padding `0.75rem 1.5rem`.
* **Gap**: `1rem` (space-4).

---

### Resultado esperado

![Mockup do widget redimensionável](sandbox:/mnt/data/booking-widget-responsive.png)

Dessa forma:

* **Nunca quebra** o botão para a próxima linha.
* **Campos extras** (idades) empurram horizontalmente.
* Em telas menores, permite **swipe** em vez de wrap.

Assim você mantém o layout limpo, responsivo e fiel ao Itaicy Design System.
