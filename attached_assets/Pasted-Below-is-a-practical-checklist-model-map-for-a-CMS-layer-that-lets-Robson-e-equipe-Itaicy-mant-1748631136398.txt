Below is a **practical checklist + model map** for a CMS layer that lets Robson e equipe Itaicy manter **TODO o conteúdo** (textos, imagens, preços, SEO, estatísticas) sem recorrer ao dev. Tudo já se encaixa ao stack que você conectou (Next/Remix + Supabase + Drizzle).

---

## 1.  Conteúdos (tabelas) indispensáveis

| Tabela / bucket            | Para quê?                              | Campos principais¹                                                                                 | Observações                                                    |
| -------------------------- | -------------------------------------- | -------------------------------------------------------------------------------------------------- | -------------------------------------------------------------- |
| **pages**                  | Roteiro do site                        | id · slug · template (enum) · title · hero\_media\_id · summary · status (draft/published)         | Escolhe *template* → header transparente, vídeo hero, etc.     |
| **page\_blocks**           | Blocos flexíveis (strip, grid, FAQ…)   | id · page\_id · type · order · jsonb props                                                         | Garante reorder drag-and-drop sem mexer em código.             |
| **suites**                 | Acomodações                            | id · label (Compacta/Ampla/Master) · slug · size\_m2 · capacity · amenities\[] · price · cover\_id | \*                                                             |
| **experiences**            | Pesca, Birdwatching, Pacotes…          | id · category · slug · title · subtitle · body\_md · cover\_id · price\_from                       | Markdown para riqueza; mostrado em Experiências e Pacotes.     |
| **testimonials**           | Prova social                           | id · name · city · rating · quote · avatar\_id                                                     |                                                                |
| **faq**                    | Perguntas frequentes                   | id · category · question · answer\_md                                                              | Reutilizável em várias páginas.                                |
| **stats**                  | Contadores (aves, peixes, desde 1897…) | id · code (ex. `BIRDS_TOTAL`) · value · unit · updated\_at                                         | Facilita alterar número sem tocar no front.                    |
| **settings**               | Config. globais                        | id=singleton · primary\_color · accent\_color · phone\_whatsapp · email                            | Use Row Level Security (RLS) allow update for role=admin only. |
| **files (storage bucket)** | Imagens / vídeos                       | id · url · alt · width · height · blurhash                                                         | Armazenado no Supabase Storage, servido via CDN.               |

¹ (**jsonb props** nos *blocks* aceita tudo: ícone, headline, colunas, links – mantém sistema enxuto).

---

## 2.  Relacionamentos & views

```mermaid
erDiagram
pages ||--o{ page_blocks : blocks
page_blocks }o--|| files : media
suites ||--o{ files : gallery
experiences ||--o{ files : gallery
```

Crie **views**:

* `public_page` (JOIN pages + page\_blocks) – exposto ao frontend para SSR.
* `suites_public` – só colunas necessárias (evita vazar price\_cost, etc.).

---

## 3.  Permissões & segurança (Supabase RLS)

```sql
-- Example: only staff update, public read
create role staff;
create policy "Public read pages"
  on pages for select
  using (status = 'published');

create policy "Staff writes pages"
  on pages for all
  using (auth.role() = 'staff') with check (auth.role() = 'staff');
```

*Habilite*:

* **Row-Level Security** em todas as tabelas.
* Bucket access: `storage.objects` policy allow GET for anon, PUT/DELETE only staff.

---

## 4.  Fluxo editorial

1. **Draft → Published** status nos registros.
2. **Preview token**

   * API `/preview?token=…` gera JWT (expira em 30 min) → front ativa modo *draft*.
3. **Webhooks**

   * `supabase.functions.deploy('revalidate')` re-valida a rota na edge (ISR ou `/api/revalidate`) cada vez que um registro `pages` sobe para `published`.

---

## 5.  Painel (opções)

### A. Supabase Studio + React-Admin

*Mais rápido* – usa dashboard nativo + extensão React-Admin no `/admin`.

### B. Open-source Headless UI (Nhost Console fork)

Se quiser interface 100 % “white-label”, clone e aponte para as APIs.

---

## 6.  Front-end bindings

| Ponto do site      | Como consumir                                                                        |
| ------------------ | ------------------------------------------------------------------------------------ |
| **Header / menu**  | Query `pages` where `template in ('home','landing')` to build nav.                   |
| **Hero**           | Em cada page SSR, busca `page.hero_media` & props do primeiro bloco se type =`hero`. |
| **Grid de suítes** | `GET /api/cms/suites` (já implementado) + SWR para fallback static.                  |
| **Counters**       | `stats` table (cache 15 min).                                                        |
| **SEO meta**       | cada page.row → `<Head>` (title, description, og\:image)                             |
| **Sitemap & RSS**  | Edge Function gera XML on-demand a partir de `pages` e `blog`.                       |

---

## 7.  Boas práticas adicionais

| Tema              | Recomendação                                                                                                                                                 |
| ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| **Versionamento** | Drizzle migrações + branch “staging” em Supabase (usando `supabase db branch`).                                                                              |
| **Backup**        | Supabase nightly dump + `storage export` -> S3 Glacier.                                                                                                      |
| **Rate-limit**    | Edge middleware limit 100 req IP / 10 min para APIs públicas.                                                                                                |
| **Image perf**    | `next/image` (`loader` apontando pro bucket) + blurhash nos placeholders.                                                                                    |
| **Accessibility** | Campo `alt` obrigatório via DB constraint (`CHECK (char_length(alt)>3)`).                                                                                    |
| **Pricing**       | Campos `valid_from`, `valid_to` em `suites_price` tabela separada → permite promoções sazonais sem sobrescrever valores.                                     |
| **Localization**  | Se quiser versão EN / ES: colunas `title_en`, `title_es` ou tabelas `*_i18n`; use PostgREST row‐locale or Field Level Encryption se precisar esconder preço. |
| **Audit**         | Extensão `supabase.realtime` + trigger `insert into audit_log` para rastrear edits.                                                                          |

---

### Resultado para o time Itaicy

* **Negócio autônomo**—Robson cadastra nova suíte ou altera tarifa sem tocar código.
* **Design consistente**—Page template garante header transparente, hero, strip, grid.
* **SEO first-class**—Slug, meta, sitemap dinâmico.
* **Segurança**—RLS + buckets públicos só para leitura.
* **Escalável**—Novos blocos = só adicionar `page_blocks.type` + componente React.

> **Próximo passo prático:**
>
> 1. Mergiar migrations no Supabase **staging**.
> 2. Habilitar painel (React-Admin) e convidar Robson com `role=staff`.
> 3. Popular tables iniciais (suites, testimonials, stats) e testar preview-draft.

Qualquer dúvida para implementar ou refinar os componentes de admin, é só chamar!
